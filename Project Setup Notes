There are a lot of online tutorials for Spring MVC. 
In this doc, I'm just going to describe the bare minimum needed to start work on the project.



Opening and running the project in IntelliJ

1) Start IntelliJ Idea and select Import Project.
2) Import the project as a Maven project (select the room pom.xml file)
3) If IntelliJ lists warnings about Java 1.5 being obsolete, go to File->Settings->Java Compiler and set bytecode version to 1.8 for Project and Target.
4) Also go to Project Structure->Project Settings-> Modules and change language level from 5 to 8.
5) To have IntelliJ generate a WAR file on Make go to File->Project Structure->Artifacts and check "Build on Make".
6) You should be able to build the project without error.
7( Now you should be able to drop the WAR file into a Tomcat 8 webapps folder on a local server and run it (tested on Tomcat 8 / Windows 10 machine).

NOTE: The WAR file that IntelliJ generates did not seem to run on AWS instance.
However, you can build the WAR running command line "mvn clean install", which does work on AWS.

Project Structure
In a Spring MVC project, we don't usually reference JSP files directly. 
We access them through route mappings, which are mapped to a controller.

Setting Up and Running Mongo in Docker (throw away instances)
If you have docker locally, you can run the following commands:
host (pull mongo image) --> `docker pull mongo:3.2`
host (launch container) --> `docker run --rm -it -p 27017:27017 mongo:3.2 bash`
container (start mongo) --> `mongod`
host (get container_name, e.g. petty_hotdog) --> `docker ps | grep mongo`
host (get container ip address) --> `docker inspect <container_name> | grep IPAddress`
host (edit hosts file) --> add `<container_ip> Mongo` to /etc/hosts
container (kill processing, this will erase data) --> `Ctrl+C` to stop mongod then `exit`
#run the docker run... command again to re-launch





